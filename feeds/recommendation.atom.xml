<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>upperli</title><link href="/" rel="alternate"></link><link href="/feeds/recommendation.atom.xml" rel="self"></link><id>/</id><updated>2010-12-03T10:20:00-05:00</updated><entry><title>推荐系统中的矩阵分解技术（译）</title><link href="/blog/recommendation001" rel="alternate"></link><updated>2010-12-03T10:20:00-05:00</updated><author><name>LCY</name></author><id>tag:,2010-12-03:blog/recommendation001</id><summary type="html">&lt;h1&gt;推荐系统中的矩阵分解技术（译）&lt;/h1&gt;
&lt;h6&gt;Yehuda Koren,  Yahoo Research ；&lt;/h6&gt;
&lt;h6&gt;Robert Bell and Chris Volinsky,  AT&amp;amp;T Labs—Research&lt;/h6&gt;
&lt;h6&gt;LCY（译）&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;正如 Netflix Prize 比赛所证明的，矩阵分解模型在产品推荐方面优于传统的最邻近（nearest-neighbor）技术，这种模型允许结合像隐式反馈，时间影响和置信水平等额外的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当代消费者面临着过量的选择。电子零售商和供应商提供了大量的产品选择，以及前所未有的机会来满足各种不同的需求和喜好。在消费者和最恰当的产品之间牵桥搭线是提高用户满意度和忠诚度的关键。因此，越来越多的零售商开始对&lt;strong&gt;推荐系统&lt;/strong&gt;感兴趣，这种系统能分析用户在产品中的兴趣来提供个性化的满足用户喜好的推荐。因为好的推荐系统能让用户体验上升一个层次，推荐系统已经成了像 Amazon.com 和 Netflix 等电子商务大佬网站中非常重要的一部分。&lt;/p&gt;
&lt;p&gt;推荐系统对于娱乐产品像如电影，音乐和电视节目等的效果格外显著。许多消费者会观看相同的电影，每个消费者也可能去观看许多不同的电影。已经证明消费者愿意表明自己对电影的满意程度，所以哪个用户喜欢哪部电影这样的数据是大量的并且是可获得的。公司可以分析这些数据来给特定的用户推荐电影。&lt;/p&gt;
&lt;h2&gt;推荐系统策略&lt;/h2&gt;
&lt;p&gt;广泛的讲，推荐系统主要基于两种策略之一。&lt;strong&gt;内容过滤&lt;/strong&gt;方法为每个用户或者产品创建一个配置文件来描述它的本质。举个例子来说，一个电影的配置文件可能包含它的类型，参与演员，票房等等属性。用户的配置文件可能包含户口资料信息或者对于恰当问卷的调查信息。这些配置文件允许程序将用户和产片关联起来。当然，基于内容的策略需要集成的表面信息可能不那么容易收集甚至不可获得。&lt;/p&gt;
&lt;p&gt;一个成功的内容过滤的案例是著名的 Music Genome Project ，这个项目被用于 Pandora.com 的网络音频服务。一个训练有素的音乐分析师为 Music Genome Project 上的每首歌曲的数以百计的显著音乐特征打分。这些属性不仅是一首歌的音乐特性，而且还是和理解听者音乐喜好的有重大联系的特征品质。&lt;/p&gt;
&lt;p&gt;相对于内容过滤的另一种可选择的方式是依赖用户的过去的行为，如以前的交易或者产品打分，这样就不需要创建明确的配置文件。这种方式被称作&lt;strong&gt;协同过滤&lt;/strong&gt; ---由第一个推荐系统的开发人员命名的术语。协同过滤分析用户和产品互赖之间的关系来确定新的用户--产品关联。&lt;/p&gt;
&lt;p&gt;协同过滤算法的一个主要的吸引力是它在域间的开放，它能解决使用内容过滤通常难于理解和描述的数据问题。在比基于内容的技术更加精确的同时，协同过滤算法也有自己的问题，那就是&lt;strong&gt;冷启动&lt;/strong&gt;问题，因为它对系统的新产品和新用户无能为力。从这个角度讲，内容过滤要更胜一筹。&lt;/p&gt;
&lt;p&gt;&lt;img alt="FIgure 1" src="" /&gt;
　　协同过滤算法的两个基本领域是基于邻域的方法和隐语义模型。基于邻域的方法专注于计算物品间的或者用户间的关系之一。面向物品的方法基于相同用户对邻居物品的发奋来导出用户对某个物品的喜好。一个产品的邻居是对于同一用户会获得相似打分的物品。例如，《拯救大兵瑞恩》的邻居可能其他电影中包含战争电影，&lt;em&gt;斯皮尔伯格&lt;/em&gt;的电影和&lt;em&gt;汤姆·汉克斯&lt;/em&gt;的电影。为了预测一个特定用户对《拯救大兵瑞恩》的评分，我们可能要这个用户对查看最邻近电影的实际打分。正如图1所示，面向用户的方法识别思维类似的用户来互相完成他人的评分。&lt;/p&gt;
&lt;p&gt;隐语义模型是另一种方法，它试图通过同时解释物品和用户的特征来给物品评分，这些特征应当是从评分中推断出来的20到100个因素。在某种意义上，这些因素构成一个计算体系来代替人工的歌曲分析。对于电影来说，已知的因素可以被显而易见的维度测量，例如喜剧对应话剧，演员的数量，亦或是面向儿童的；不好定义的方面像个性的发展和离奇的程度，或者完全无法描述的维度。对于用户来说，每个方面衡量用户在相应电影因素上的感冒程度。&lt;/p&gt;
&lt;p&gt;&lt;img alt="FIgure 2" src="" /&gt;
　　图二用一个简单地两个维度上的例子阐明了这个观点。考虑两个假设的维度：面向女性的对应面向男性的和严肃的对应荒诞的。对于这个模型，一个用户对一部电影的评分预测，和电影的平均得分有关，它等于电影和用户在图上位置的点乘。举个例子来说，我们会预测&lt;em&gt;Gus&lt;/em&gt;喜欢《阿呆和阿瓜》，讨厌《紫颜色》，对《勇敢的心》兴致平平。值得注意的是，许多电影如《11罗汉》和用户例如&lt;em&gt;Dave&lt;/em&gt;将会在这两个维度上表现的十分中性化。&lt;/p&gt;
&lt;h2&gt;矩阵分解方法&lt;/h2&gt;</summary><category term="推荐算法，机器学习"></category></entry></feed>